# configuration defaults

HttpHeadersRule {
  whitelist: [ETag, TSV, TE, Content-MD5, DNT, X-ATT-DeviceId, X-UIDH, X-Request-ID, X-Correlation-ID,
    WWW-Authenticate, X-XSS-Protection, X-Flow-ID, X-UID, X-Tenant-ID, X-Device-OS, X-Trace-ID,
    X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset]
}

LimitNumberOfResourcesRule {
  resource_types_limit: 8
  path_whitelist: []
}

LimitNumberOfSubResourcesRule {
  subresources_limit: 3
}

CommonFieldTypesRule {
  common_types {
    id: [string, null]
    created: [string, date-time]
    modified: [string, date-time]
    type: [string, null]
  }
}

UseStandardHttpStatusCodesRule {
  well_understood {
    // Success Codes
    200: [ALL]
    201: [POST, PUT]
    202: [POST, PUT, DELETE, PATCH]
    204: [PUT, DELETE, PATCH]
    207: [POST]

    // Redirection Codes
    301: [ALL]
    303: [PATCH, POST, PUT, DELETE]
    304: [GET, HEAD]

    // Client Side Error Codes
    400: [ALL]
    401: [ALL]
    403: [ALL]
    404: [ALL]
    405: [ALL]
    406: [ALL]
    408: [ALL]
    409: [POST, PUT, DELETE, PATCH]
    410: [ALL]
    412: [PUT, DELETE, PATCH]
    415: [POST, PUT, DELETE, PATCH]
    423: [PUT, DELETE, PATCH]
    428: [ALL]
    429: [ALL]

    // Server Side Error Codes
    500: [ALL]
    501: [ALL]
    503: [ALL]

    // Zally Additions
    default: [ALL]
  },
  standard: [100, 101,
    200, 201, 202, 203, 204, 205, 206, 207
    300, 301, 302, 303, 304, 305, 307,
    400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 423, 426, 428, 429, 431
    500, 501, 502, 503, 504, 505, 511,
    default]
}

PluralizeResourceNamesRule {
  whitelist: [
    /api/
    /kpis/
  ]
}

UseOpenApiRule {
  schema_urls: {
    # swagger: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v2.0/schema.json",
    # openapi3: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v3.0/schema.json"
  }
}

FormatForNumbersRule {
  formats {
    integer: [int32, int64, bigint]
    number: [float, double, decimal]
  }
}

ApiAudienceRule {
  audiences: [component-internal, business-unit-internal, company-internal, external-partner, external-public]
}

SecureAllEndpointsWithScopesRule {
  scope_regex: "^(uid)|(([a-z-]+\\.){1,2}(read|write))$"
  path_whitelist: []
}

ProprietaryHeadersRule {
  standard_request_headers: [
    "A-IM",
    "Accept",
    "Accept-Charset",
    "Accept-Encoding",
    "Accept-Language",
    "Accept-Datetime",
    "Access-Control-Request-Method",
    "Access-Control-Request-Headers",
    "Authorization",
    "Cache-Control",
    "Connection",
    "Content-Length",
    "Content-MD5",
    "Content-Type",
    "Cookie",
    "Date",
    "Expect",
    "Forwarded",
    "From",
    "Host",
    "Idempotency-Key",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Range",
    "If-Unmodified-Since",
    "Max-Forwards",
    "Origin",
    "Pragma",
    "Prefer",
    "Proxy-Authorization",
    "Range",
    "Referer",
    "TE",
    "User-Agent",
    "Upgrade",
    "Via",
    "Warning"
  ],
  standard_response_headers: [
    "Access-Control-Allow-Origin",
    "Access-Control-Allow-Credentials",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Headers",
    "Accept-Patch",
    "Accept-Ranges",
    "Age",
    "Allow",
    "Alt-Svc",
    "Cache-Control",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Location",
    "Content-MD5",
    "Content-Range",
    "Content-Type",
    "Date",
    "Delta-Base",
    "ETag",
    "Expires",
    "IM",
    "Last-Modified",
    "Link",
    "Location",
    "P3P",
    "Pragma",
    "Proxy-Authenticate",
    "Public-Key-Pins",
    "Retry-After",
    "Server",
    "Set-Cookie",
    "Strict-Transport-Security",
    "Trailer",
    "Transfer-Encoding",
    "Tk",
    "Upgrade",
    "Vary",
    "Via",
    "Warning",
    "WWW-Authenticate"
  ],
  zipkin_headers: [
    "X-B3-TraceId",
    "X-B3-ParentSpanId",
    "X-B3-SpanId",
    "X-B3-Sampled"
  ],
  sbb_headers: [
    "Requester-Info",
    "Request-Id",
    "Process-Id",
    "Correlation-Id",
    "Transaction-Id",
    "X-Contract-Id",
    "X-Conversation-Id"
  ]
}

DateTimePropertiesSuffixRule {
  patterns: [
    ".*_at"
  ]
}

CaseChecker {
  cases {
    camelCase:              "[a-z][a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    PascalCase:             "[A-Z]+[a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    snake_case:             "[a-z][a-z0-9]*(?:_[a-z0-9]+)*"
    SCREAMING_SNAKE_CASE:   "[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*"
    kebab-case:             "[a-z][a-z0-9]*(?:-[a-z0-9]+)*"
    COBOL-CASE:             "[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)*"
    hyphenated-Camel-Case:  "[a-z][a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Hyphenated-Pascal-Case: "[A-Z]+[a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Title Case:              "([A-Z][^\\s]*\\s?)+"
  }
  pathSegments {
    allow: [
      ${CaseChecker.cases.kebab-case}
    ]
  }
  propertyNames {
    allow: [
      ${CaseChecker.cases.camelCase},
      _links
    ]
  }
  pathParameterNames {
    allow: [
      ${CaseChecker.cases.kebab-case},
      ${CaseChecker.cases.snake_case}
    ]
  }
  queryParameterNames {
    allow: [
      ${CaseChecker.cases.camelCase}
    ]
  }
  headerNames {
    allow: [
      ${CaseChecker.cases.Hyphenated-Pascal-Case}
    ]
  }
  tagNames {
    allow: [
      ${CaseChecker.cases.Title Case}
    ]
  }
  discriminatorValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
  enumValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
}
